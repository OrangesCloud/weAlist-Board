"""Initial schema with UUID and custom roles

Revision ID: 35de05bd5bbd
Revises: 
Create Date: 2025-10-25 07:10:15.030229

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '35de05bd5bbd'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('attachments',
    sa.Column('target_type', sa.Enum('PROJECT', 'TICKET', 'TASK', name='targettype'), nullable=False, comment='첨부 대상 타입 (PROJECT, TICKET, TASK)'),
    sa.Column('target_id', sa.UUID(), nullable=False, comment='첨부 대상 ID (projects.id, tickets.id, 또는 tasks.id)'),
    sa.Column('file_name', sa.String(length=255), nullable=False, comment='파일명'),
    sa.Column('file_path', sa.String(length=500), nullable=False, comment='파일 저장 경로'),
    sa.Column('file_size', sa.BigInteger(), nullable=True, comment='파일 크기 (bytes)'),
    sa.Column('mime_type', sa.String(length=100), nullable=True, comment='MIME 타입 (예: image/png, application/pdf)'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='소프트 삭제 플래그'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='References users.id from Member service (no FK for microservice)'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='References users.id from Member service (no FK for microservice)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_attachments_created_by'), 'attachments', ['created_by'], unique=False)
    op.create_index(op.f('ix_attachments_id'), 'attachments', ['id'], unique=False)
    op.create_index(op.f('ix_attachments_is_deleted'), 'attachments', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_attachments_target_id'), 'attachments', ['target_id'], unique=False)
    op.create_index(op.f('ix_attachments_target_type'), 'attachments', ['target_type'], unique=False)
    op.create_index(op.f('ix_attachments_updated_by'), 'attachments', ['updated_by'], unique=False)
    op.create_table('comments',
    sa.Column('target_type', sa.Enum('PROJECT', 'TICKET', 'TASK', name='targettype'), nullable=False, comment='댓글 대상 타입 (TICKET, TASK)'),
    sa.Column('target_id', sa.UUID(), nullable=False, comment='댓글 대상 ID (tickets.id 또는 tasks.id)'),
    sa.Column('author_id', sa.UUID(), nullable=False, comment='References users.id from User service - 댓글 작성자'),
    sa.Column('content', sa.Text(), nullable=False, comment='댓글 내용'),
    sa.Column('parent_id', sa.UUID(), nullable=True, comment='대댓글인 경우 부모 댓글 ID (self-reference)'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='소프트 삭제 플래그'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='References users.id from Member service (no FK for microservice)'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='References users.id from Member service (no FK for microservice)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_comments_author_id'), 'comments', ['author_id'], unique=False)
    op.create_index(op.f('ix_comments_created_by'), 'comments', ['created_by'], unique=False)
    op.create_index(op.f('ix_comments_id'), 'comments', ['id'], unique=False)
    op.create_index(op.f('ix_comments_is_deleted'), 'comments', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_comments_parent_id'), 'comments', ['parent_id'], unique=False)
    op.create_index(op.f('ix_comments_target_id'), 'comments', ['target_id'], unique=False)
    op.create_index(op.f('ix_comments_target_type'), 'comments', ['target_type'], unique=False)
    op.create_index(op.f('ix_comments_updated_by'), 'comments', ['updated_by'], unique=False)
    op.create_table('project_members',
    sa.Column('project_id', sa.UUID(), nullable=False, comment='References projects.id (no FK for sharding)'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='References users.id from User service'),
    sa.Column('role_id', sa.UUID(), nullable=True, comment='References project_roles.id (nullable - 역할 미부여 상태 가능)'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='소프트 삭제 플래그'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='References users.id from Member service (no FK for microservice)'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='References users.id from Member service (no FK for microservice)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_project_members_created_by'), 'project_members', ['created_by'], unique=False)
    op.create_index(op.f('ix_project_members_id'), 'project_members', ['id'], unique=False)
    op.create_index(op.f('ix_project_members_is_deleted'), 'project_members', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_project_members_project_id'), 'project_members', ['project_id'], unique=False)
    op.create_index(op.f('ix_project_members_role_id'), 'project_members', ['role_id'], unique=False)
    op.create_index(op.f('ix_project_members_updated_by'), 'project_members', ['updated_by'], unique=False)
    op.create_index(op.f('ix_project_members_user_id'), 'project_members', ['user_id'], unique=False)
    op.create_table('project_roles',
    sa.Column('project_id', sa.UUID(), nullable=False, comment='References projects.id (no FK for sharding)'),
    sa.Column('role_name', sa.String(length=100), nullable=False, comment='역할 이름 (예: 개발1팀, 디자이너, 기획자)'),
    sa.Column('description', sa.Text(), nullable=True, comment='역할 설명'),
    sa.Column('color', sa.String(length=7), nullable=True, comment='UI 표시 색상 (HEX, 예: #FF5733)'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='소프트 삭제 플래그'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='References users.id from Member service (no FK for microservice)'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='References users.id from Member service (no FK for microservice)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_project_roles_created_by'), 'project_roles', ['created_by'], unique=False)
    op.create_index(op.f('ix_project_roles_id'), 'project_roles', ['id'], unique=False)
    op.create_index(op.f('ix_project_roles_is_deleted'), 'project_roles', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_project_roles_project_id'), 'project_roles', ['project_id'], unique=False)
    op.create_index(op.f('ix_project_roles_role_name'), 'project_roles', ['role_name'], unique=False)
    op.create_index(op.f('ix_project_roles_updated_by'), 'project_roles', ['updated_by'], unique=False)
    op.create_table('projects',
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('PLANNING', 'ACTIVE', 'COMPLETED', 'ON_HOLD', 'CANCELLED', name='projectstatus'), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='priority'), nullable=False),
    sa.Column('workspace_id', sa.UUID(), nullable=False, comment='References workspaces.id (no FK for sharding)'),
    sa.Column('start_date', sa.Date(), nullable=True, comment='프로젝트 시작일'),
    sa.Column('end_date', sa.Date(), nullable=True, comment='프로젝트 종료일'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='소프트 삭제 플래그'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='References users.id from Member service (no FK for microservice)'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='References users.id from Member service (no FK for microservice)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_projects_created_by'), 'projects', ['created_by'], unique=False)
    op.create_index(op.f('ix_projects_id'), 'projects', ['id'], unique=False)
    op.create_index(op.f('ix_projects_is_deleted'), 'projects', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_projects_name'), 'projects', ['name'], unique=False)
    op.create_index(op.f('ix_projects_priority'), 'projects', ['priority'], unique=False)
    op.create_index(op.f('ix_projects_status'), 'projects', ['status'], unique=False)
    op.create_index(op.f('ix_projects_updated_by'), 'projects', ['updated_by'], unique=False)
    op.create_index(op.f('ix_projects_workspace_id'), 'projects', ['workspace_id'], unique=False)
    op.create_table('task_members',
    sa.Column('task_id', sa.UUID(), nullable=False, comment='References tasks.id (no FK for sharding)'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='References users.id from User service'),
    sa.Column('participation_type', sa.Enum('ASSIGNEE', 'REVIEWER', name='taskparticipationtype'), nullable=False, comment='참여 타입 (담당자/리뷰어)'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='소프트 삭제 플래그'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='References users.id from Member service (no FK for microservice)'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='References users.id from Member service (no FK for microservice)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_task_members_created_by'), 'task_members', ['created_by'], unique=False)
    op.create_index(op.f('ix_task_members_id'), 'task_members', ['id'], unique=False)
    op.create_index(op.f('ix_task_members_is_deleted'), 'task_members', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_task_members_participation_type'), 'task_members', ['participation_type'], unique=False)
    op.create_index(op.f('ix_task_members_task_id'), 'task_members', ['task_id'], unique=False)
    op.create_index(op.f('ix_task_members_updated_by'), 'task_members', ['updated_by'], unique=False)
    op.create_index(op.f('ix_task_members_user_id'), 'task_members', ['user_id'], unique=False)
    op.create_table('tasks',
    sa.Column('title', sa.String(length=300), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('TODO', 'IN_PROGRESS', 'REVIEW', 'DONE', name='taskstatus'), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ticket_id', sa.UUID(), nullable=False, comment='References tickets.id (no FK for sharding)'),
    sa.Column('assignee_id', sa.UUID(), nullable=True, comment='References users.id from Member service - 작업 담당자'),
    sa.Column('due_date', sa.Date(), nullable=True, comment='태스크 마감일'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='소프트 삭제 플래그'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='References users.id from Member service (no FK for microservice)'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='References users.id from Member service (no FK for microservice)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tasks_assignee_id'), 'tasks', ['assignee_id'], unique=False)
    op.create_index(op.f('ix_tasks_created_by'), 'tasks', ['created_by'], unique=False)
    op.create_index(op.f('ix_tasks_id'), 'tasks', ['id'], unique=False)
    op.create_index(op.f('ix_tasks_is_deleted'), 'tasks', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_tasks_status'), 'tasks', ['status'], unique=False)
    op.create_index(op.f('ix_tasks_ticket_id'), 'tasks', ['ticket_id'], unique=False)
    op.create_index(op.f('ix_tasks_title'), 'tasks', ['title'], unique=False)
    op.create_index(op.f('ix_tasks_updated_by'), 'tasks', ['updated_by'], unique=False)
    op.create_table('ticket_members',
    sa.Column('ticket_id', sa.UUID(), nullable=False, comment='References tickets.id (no FK for sharding)'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='References users.id from User service'),
    sa.Column('participation_type', sa.Enum('ASSIGNEE', 'REVIEWER', 'WATCHER', name='ticketparticipationtype'), nullable=False, comment='참여 타입 (담당자/리뷰어/관찰자)'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='소프트 삭제 플래그'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='References users.id from Member service (no FK for microservice)'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='References users.id from Member service (no FK for microservice)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ticket_members_created_by'), 'ticket_members', ['created_by'], unique=False)
    op.create_index(op.f('ix_ticket_members_id'), 'ticket_members', ['id'], unique=False)
    op.create_index(op.f('ix_ticket_members_is_deleted'), 'ticket_members', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_ticket_members_participation_type'), 'ticket_members', ['participation_type'], unique=False)
    op.create_index(op.f('ix_ticket_members_ticket_id'), 'ticket_members', ['ticket_id'], unique=False)
    op.create_index(op.f('ix_ticket_members_updated_by'), 'ticket_members', ['updated_by'], unique=False)
    op.create_index(op.f('ix_ticket_members_user_id'), 'ticket_members', ['user_id'], unique=False)
    op.create_table('tickets',
    sa.Column('title', sa.String(length=300), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('OPEN', 'IN_PROGRESS', 'REVIEW', 'TESTING', 'DONE', 'CLOSED', 'BLOCKED', name='ticketstatus'), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='priority'), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False, comment='References projects.id (no FK for sharding)'),
    sa.Column('assignee_id', sa.UUID(), nullable=True, comment='References users.id from Member service - 티켓 담당자'),
    sa.Column('parent_ticket', sa.UUID(), nullable=True, comment='상위 티켓 ID (서브태스크용, self-reference)'),
    sa.Column('due_date', sa.Date(), nullable=True, comment='티켓 마감일'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='소프트 삭제 플래그'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='References users.id from Member service (no FK for microservice)'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='References users.id from Member service (no FK for microservice)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tickets_assignee_id'), 'tickets', ['assignee_id'], unique=False)
    op.create_index(op.f('ix_tickets_created_by'), 'tickets', ['created_by'], unique=False)
    op.create_index(op.f('ix_tickets_id'), 'tickets', ['id'], unique=False)
    op.create_index(op.f('ix_tickets_is_deleted'), 'tickets', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_tickets_parent_ticket'), 'tickets', ['parent_ticket'], unique=False)
    op.create_index(op.f('ix_tickets_priority'), 'tickets', ['priority'], unique=False)
    op.create_index(op.f('ix_tickets_project_id'), 'tickets', ['project_id'], unique=False)
    op.create_index(op.f('ix_tickets_status'), 'tickets', ['status'], unique=False)
    op.create_index(op.f('ix_tickets_title'), 'tickets', ['title'], unique=False)
    op.create_index(op.f('ix_tickets_updated_by'), 'tickets', ['updated_by'], unique=False)
    op.create_table('workspaces',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='References users.id from Member service (no FK for microservice)'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='References users.id from Member service (no FK for microservice)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workspaces_created_by'), 'workspaces', ['created_by'], unique=False)
    op.create_index(op.f('ix_workspaces_id'), 'workspaces', ['id'], unique=False)
    op.create_index(op.f('ix_workspaces_name'), 'workspaces', ['name'], unique=False)
    op.create_index(op.f('ix_workspaces_updated_by'), 'workspaces', ['updated_by'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_workspaces_updated_by'), table_name='workspaces')
    op.drop_index(op.f('ix_workspaces_name'), table_name='workspaces')
    op.drop_index(op.f('ix_workspaces_id'), table_name='workspaces')
    op.drop_index(op.f('ix_workspaces_created_by'), table_name='workspaces')
    op.drop_table('workspaces')
    op.drop_index(op.f('ix_tickets_updated_by'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_title'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_status'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_project_id'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_priority'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_parent_ticket'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_is_deleted'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_id'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_created_by'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_assignee_id'), table_name='tickets')
    op.drop_table('tickets')
    op.drop_index(op.f('ix_ticket_members_user_id'), table_name='ticket_members')
    op.drop_index(op.f('ix_ticket_members_updated_by'), table_name='ticket_members')
    op.drop_index(op.f('ix_ticket_members_ticket_id'), table_name='ticket_members')
    op.drop_index(op.f('ix_ticket_members_participation_type'), table_name='ticket_members')
    op.drop_index(op.f('ix_ticket_members_is_deleted'), table_name='ticket_members')
    op.drop_index(op.f('ix_ticket_members_id'), table_name='ticket_members')
    op.drop_index(op.f('ix_ticket_members_created_by'), table_name='ticket_members')
    op.drop_table('ticket_members')
    op.drop_index(op.f('ix_tasks_updated_by'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_title'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_ticket_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_status'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_is_deleted'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_created_by'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_assignee_id'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_task_members_user_id'), table_name='task_members')
    op.drop_index(op.f('ix_task_members_updated_by'), table_name='task_members')
    op.drop_index(op.f('ix_task_members_task_id'), table_name='task_members')
    op.drop_index(op.f('ix_task_members_participation_type'), table_name='task_members')
    op.drop_index(op.f('ix_task_members_is_deleted'), table_name='task_members')
    op.drop_index(op.f('ix_task_members_id'), table_name='task_members')
    op.drop_index(op.f('ix_task_members_created_by'), table_name='task_members')
    op.drop_table('task_members')
    op.drop_index(op.f('ix_projects_workspace_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_updated_by'), table_name='projects')
    op.drop_index(op.f('ix_projects_status'), table_name='projects')
    op.drop_index(op.f('ix_projects_priority'), table_name='projects')
    op.drop_index(op.f('ix_projects_name'), table_name='projects')
    op.drop_index(op.f('ix_projects_is_deleted'), table_name='projects')
    op.drop_index(op.f('ix_projects_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_created_by'), table_name='projects')
    op.drop_table('projects')
    op.drop_index(op.f('ix_project_roles_updated_by'), table_name='project_roles')
    op.drop_index(op.f('ix_project_roles_role_name'), table_name='project_roles')
    op.drop_index(op.f('ix_project_roles_project_id'), table_name='project_roles')
    op.drop_index(op.f('ix_project_roles_is_deleted'), table_name='project_roles')
    op.drop_index(op.f('ix_project_roles_id'), table_name='project_roles')
    op.drop_index(op.f('ix_project_roles_created_by'), table_name='project_roles')
    op.drop_table('project_roles')
    op.drop_index(op.f('ix_project_members_user_id'), table_name='project_members')
    op.drop_index(op.f('ix_project_members_updated_by'), table_name='project_members')
    op.drop_index(op.f('ix_project_members_role_id'), table_name='project_members')
    op.drop_index(op.f('ix_project_members_project_id'), table_name='project_members')
    op.drop_index(op.f('ix_project_members_is_deleted'), table_name='project_members')
    op.drop_index(op.f('ix_project_members_id'), table_name='project_members')
    op.drop_index(op.f('ix_project_members_created_by'), table_name='project_members')
    op.drop_table('project_members')
    op.drop_index(op.f('ix_comments_updated_by'), table_name='comments')
    op.drop_index(op.f('ix_comments_target_type'), table_name='comments')
    op.drop_index(op.f('ix_comments_target_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_parent_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_is_deleted'), table_name='comments')
    op.drop_index(op.f('ix_comments_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_created_by'), table_name='comments')
    op.drop_index(op.f('ix_comments_author_id'), table_name='comments')
    op.drop_table('comments')
    op.drop_index(op.f('ix_attachments_updated_by'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_target_type'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_target_id'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_is_deleted'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_id'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_created_by'), table_name='attachments')
    op.drop_table('attachments')
    # ### end Alembic commands ###
