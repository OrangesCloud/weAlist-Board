"""Add ticket_types and notifications tables

Revision ID: 15615a7959d1
Revises: 35de05bd5bbd
Create Date: 2025-10-25 08:03:04.626127

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '15615a7959d1'
down_revision: Union[str, None] = '35de05bd5bbd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('notifications',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='알림을 받을 사용자 ID (users.id 참조)'),
    sa.Column('notification_type', sa.Enum('TICKET_CREATED', 'TICKET_UPDATED', 'COMMENT_ADDED', 'TICKET_ASSIGNED', 'DUE_DATE_REMINDER', 'MENTION', name='notificationtype'), nullable=False, comment='알림 타입 (TICKET_CREATED, COMMENT_ADDED 등)'),
    sa.Column('title', sa.String(length=200), nullable=False, comment='알림 제목'),
    sa.Column('content', sa.Text(), nullable=True, comment='알림 내용'),
    sa.Column('target_type', sa.String(length=50), nullable=True, comment='관련 대상 타입 (TICKET, COMMENT, PROJECT 등)'),
    sa.Column('target_id', sa.UUID(), nullable=True, comment='관련 대상 ID (tickets.id, comments.id 등)'),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='추가 정보 (JSON 형식, 예: {"old_status": "OPEN", "new_status": "IN_PROGRESS"})'),
    sa.Column('is_read', sa.Boolean(), nullable=False, comment='읽음 여부'),
    sa.Column('read_at', sa.DateTime(), nullable=True, comment='읽은 시각'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='References users.id from Member service (no FK for microservice)'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='References users.id from Member service (no FK for microservice)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_notifications_created_by'), 'notifications', ['created_by'], unique=False)
    op.create_index(op.f('ix_notifications_id'), 'notifications', ['id'], unique=False)
    op.create_index(op.f('ix_notifications_is_read'), 'notifications', ['is_read'], unique=False)
    op.create_index(op.f('ix_notifications_notification_type'), 'notifications', ['notification_type'], unique=False)
    op.create_index(op.f('ix_notifications_target_id'), 'notifications', ['target_id'], unique=False)
    op.create_index(op.f('ix_notifications_updated_by'), 'notifications', ['updated_by'], unique=False)
    op.create_index(op.f('ix_notifications_user_id'), 'notifications', ['user_id'], unique=False)
    op.create_table('ticket_types',
    sa.Column('project_id', sa.UUID(), nullable=False, comment='프로젝트 ID (projects.id 참조)'),
    sa.Column('type_name', sa.String(length=100), nullable=False, comment="티켓 타입 이름 (예: '개발', '디자인', '버그', '긴급 이슈')"),
    sa.Column('description', sa.Text(), nullable=True, comment='타입 설명'),
    sa.Column('color', sa.String(length=7), nullable=True, comment='UI 표시용 색상 (HEX, 예: #FF5733)'),
    sa.Column('icon', sa.String(length=50), nullable=True, comment="아이콘 이름 (예: 'bug', 'feature', 'design', 'urgent')"),
    sa.Column('display_order', sa.Integer(), nullable=True, comment='표시 순서 (정렬용)'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='소프트 삭제 플래그'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='References users.id from Member service (no FK for microservice)'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='References users.id from Member service (no FK for microservice)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ticket_types_created_by'), 'ticket_types', ['created_by'], unique=False)
    op.create_index(op.f('ix_ticket_types_id'), 'ticket_types', ['id'], unique=False)
    op.create_index(op.f('ix_ticket_types_is_deleted'), 'ticket_types', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_ticket_types_project_id'), 'ticket_types', ['project_id'], unique=False)
    op.create_index(op.f('ix_ticket_types_type_name'), 'ticket_types', ['type_name'], unique=False)
    op.create_index(op.f('ix_ticket_types_updated_by'), 'ticket_types', ['updated_by'], unique=False)
    op.add_column('tickets', sa.Column('ticket_type_id', sa.UUID(), nullable=True, comment="티켓 타입 ID (ticket_types.id 참조) - 프로젝트별 커스텀 카테고리 (예: '개발', '디자인', '버그')"))
    op.create_index(op.f('ix_tickets_ticket_type_id'), 'tickets', ['ticket_type_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tickets_ticket_type_id'), table_name='tickets')
    op.drop_column('tickets', 'ticket_type_id')
    op.drop_index(op.f('ix_ticket_types_updated_by'), table_name='ticket_types')
    op.drop_index(op.f('ix_ticket_types_type_name'), table_name='ticket_types')
    op.drop_index(op.f('ix_ticket_types_project_id'), table_name='ticket_types')
    op.drop_index(op.f('ix_ticket_types_is_deleted'), table_name='ticket_types')
    op.drop_index(op.f('ix_ticket_types_id'), table_name='ticket_types')
    op.drop_index(op.f('ix_ticket_types_created_by'), table_name='ticket_types')
    op.drop_table('ticket_types')
    op.drop_index(op.f('ix_notifications_user_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_updated_by'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_target_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_notification_type'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_is_read'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_created_by'), table_name='notifications')
    op.drop_table('notifications')
    # ### end Alembic commands ###
